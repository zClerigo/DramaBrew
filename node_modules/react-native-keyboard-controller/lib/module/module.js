import { KeyboardControllerNative, KeyboardEvents } from "./bindings";
let isClosed = false;
let lastEvent = null;
KeyboardEvents.addListener("keyboardDidHide", e => {
  isClosed = true;
  lastEvent = e;
});
KeyboardEvents.addListener("keyboardDidShow", e => {
  isClosed = false;
  lastEvent = e;
});
const dismiss = async ({
  keepFocus
} = {
  keepFocus: false
}) => {
  return new Promise(resolve => {
    if (isClosed) {
      resolve();
      return;
    }
    const subscription = KeyboardEvents.addListener("keyboardDidHide", () => {
      resolve(undefined);
      subscription.remove();
    });
    KeyboardControllerNative.dismiss(keepFocus);
  });
};
const isVisible = () => !isClosed;
const state = () => lastEvent;
export const KeyboardController = {
  setDefaultMode: KeyboardControllerNative.setDefaultMode,
  setInputMode: KeyboardControllerNative.setInputMode,
  setFocusTo: KeyboardControllerNative.setFocusTo,
  dismiss,
  isVisible,
  state
};
//# sourceMappingURL=module.js.map