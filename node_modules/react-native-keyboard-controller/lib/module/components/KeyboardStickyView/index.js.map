{"version":3,"names":["React","forwardRef","useMemo","Reanimated","interpolate","useAnimatedStyle","useReanimatedKeyboardAnimation","KeyboardStickyView","children","offset","closed","opened","style","enabled","props","ref","height","progress","stickyViewStyle","value","transform","translateY","styles","createElement","View","_extends"],"sources":["index.tsx"],"sourcesContent":["import React, { forwardRef, useMemo } from \"react\";\nimport Reanimated, {\n  interpolate,\n  useAnimatedStyle,\n} from \"react-native-reanimated\";\n\nimport { useReanimatedKeyboardAnimation } from \"../../hooks\";\n\nimport type { View, ViewProps } from \"react-native\";\n\nexport type KeyboardStickyViewProps = {\n  /**\n   * Specify additional offset to the view for given keyboard state.\n   */\n  offset?: {\n    /**\n     * Adds additional `translateY` when keyboard is close. By default `0`.\n     */\n    closed?: number;\n    /**\n     * Adds additional `translateY` when keyboard is open. By default `0`.\n     */\n    opened?: number;\n  };\n\n  /** Controls whether this `KeyboardStickyView` instance should take effect. Default is `true` */\n  enabled?: boolean;\n} & ViewProps;\n\nconst KeyboardStickyView = forwardRef<\n  View,\n  React.PropsWithChildren<KeyboardStickyViewProps>\n>(\n  (\n    {\n      children,\n      offset: { closed = 0, opened = 0 } = {},\n      style,\n      enabled = true,\n      ...props\n    },\n    ref,\n  ) => {\n    const { height, progress } = useReanimatedKeyboardAnimation();\n\n    const stickyViewStyle = useAnimatedStyle(() => {\n      const offset = interpolate(progress.value, [0, 1], [closed, opened]);\n\n      return {\n        transform: [{ translateY: enabled ? height.value + offset : closed }],\n      };\n    }, [closed, opened, enabled]);\n\n    const styles = useMemo(\n      () => [style, stickyViewStyle],\n      [style, stickyViewStyle],\n    );\n\n    return (\n      <Reanimated.View ref={ref} style={styles} {...props}>\n        {children}\n      </Reanimated.View>\n    );\n  },\n);\n\nexport default KeyboardStickyView;\n"],"mappings":";AAAA,OAAOA,KAAK,IAAIC,UAAU,EAAEC,OAAO,QAAQ,OAAO;AAClD,OAAOC,UAAU,IACfC,WAAW,EACXC,gBAAgB,QACX,yBAAyB;AAEhC,SAASC,8BAA8B,QAAQ,aAAa;AAuB5D,MAAMC,kBAAkB,gBAAGN,UAAU,CAInC,CACE;EACEO,QAAQ;EACRC,MAAM,EAAE;IAAEC,MAAM,GAAG,CAAC;IAAEC,MAAM,GAAG;EAAE,CAAC,GAAG,CAAC,CAAC;EACvCC,KAAK;EACLC,OAAO,GAAG,IAAI;EACd,GAAGC;AACL,CAAC,EACDC,GAAG,KACA;EACH,MAAM;IAAEC,MAAM;IAAEC;EAAS,CAAC,GAAGX,8BAA8B,CAAC,CAAC;EAE7D,MAAMY,eAAe,GAAGb,gBAAgB,CAAC,MAAM;IAC7C,MAAMI,MAAM,GAAGL,WAAW,CAACa,QAAQ,CAACE,KAAK,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAACT,MAAM,EAAEC,MAAM,CAAC,CAAC;IAEpE,OAAO;MACLS,SAAS,EAAE,CAAC;QAAEC,UAAU,EAAER,OAAO,GAAGG,MAAM,CAACG,KAAK,GAAGV,MAAM,GAAGC;MAAO,CAAC;IACtE,CAAC;EACH,CAAC,EAAE,CAACA,MAAM,EAAEC,MAAM,EAAEE,OAAO,CAAC,CAAC;EAE7B,MAAMS,MAAM,GAAGpB,OAAO,CACpB,MAAM,CAACU,KAAK,EAAEM,eAAe,CAAC,EAC9B,CAACN,KAAK,EAAEM,eAAe,CACzB,CAAC;EAED,oBACElB,KAAA,CAAAuB,aAAA,CAACpB,UAAU,CAACqB,IAAI,EAAAC,QAAA;IAACV,GAAG,EAAEA,GAAI;IAACH,KAAK,EAAEU;EAAO,GAAKR,KAAK,GAChDN,QACc,CAAC;AAEtB,CACF,CAAC;AAED,eAAeD,kBAAkB","ignoreList":[]}